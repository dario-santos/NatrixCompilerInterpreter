# Definição da Gramática

# Lexer
# É de realçar que a gramática do Natrix foi alterada durante a implementação
# Sendo assim este ficheiro pode não ser 100% fiel 


<digit> ::= ['0'-'9']
<char>  ::= ['a-zA-Z']
<integer>   ::= <digit>+
<id>    ::= ('_' | <char>)(<char> | <digit>)* 
<newline> ::= '\n'
<whitespace> ::= '\t' | ' '
<binop> ::= '+' | '-' | '/' | '*'
<booleanbop> ::= '>' | '>=' | '==' | '!=' | '<' | '<='

# Parser

<program> ::= <statements> 

<statements> ::= (<statement> | <function_def>)*

<type> ::= int | <id>

<statement> ::= <statement>*
              | 'if' '(' <boolean_expression> ')'
			    	'{' <statement> '}'
				'else'
					'{' <statement> '}'
			  | 'foreach' <id> 'in' [<integer> '..' <integer>] '{' <statement> '}'
			  | 'print' '(' <expression> ')' ';'
			  | <id> ':=' <expression> ';'
			  | <id> '[' <expression> ']' ':=' <expression> ';'
			  | 'val' <id> ':' <type> '=' <expression> ';'
			  | 'type' <id> '=' '[' <integer> '..' <integer> ']' ';'

<expression> ::= <lparen> <expression> <rparen>
               | <expression> <binop> <expression>
               | <expression> <lbracket> <expression> <rbracket>
			   | <integer>
			   | <id>

<boolean_expression> ::= '('<expression> <booleanop> <expression> ')'
                       |  <expression> <booleanop> <expression>
					   | '!' <boolean_expression>

<argument_list> ::= (<id> ':' <type>)*
<function_def> ::= 'function' <id> '(' <argument_list> ')' ':' <type> '{' <statement> 'return' <integer> ';' '}'
