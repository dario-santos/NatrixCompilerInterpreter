# 1 "lexer.mll"
 
  open Lexing
  open Ast
  open Parser
  
  exception Lexing_error of string

  let create_hashtable size init =
    let tbl = Hashtbl.create size in
    List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
    tbl
  
  let keyword_table =
    create_hashtable 32
    [
      ("val", VAL);
      ("int", INT);
      ("if", IF);
      ("else", ELSE);
      ("foreach", FOREACH);
      ("in", IN);
      ("type", TYPE);
      ("print", PRINT);
      ("return", RETURN);
      ("maxint", MAXINT);
      ("minint", MININT)
    ]

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

# 36 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\226\255\078\000\153\000\017\000\230\255\231\255\
    \001\000\012\000\003\000\031\000\033\000\242\255\243\255\244\255\
    \245\255\246\255\247\255\248\255\249\255\035\000\252\255\253\255\
    \002\000\090\000\255\255\254\255\236\255\239\255\237\255\235\255\
    \234\255\233\255\229\255\001\000\253\255\254\255\255\255\096\000\
    \253\255\254\255\098\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\028\000\027\000\030\000\255\255\255\255\
    \030\000\030\000\023\000\017\000\015\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\255\255\255\255\
    \005\000\014\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\036\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\023\000\038\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\010\000\000\000\000\000\000\000\000\000\008\000\033\000\
    \024\000\020\000\013\000\015\000\027\000\014\000\005\000\025\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\007\000\006\000\012\000\021\000\011\000\034\000\
    \031\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\019\000\030\000\018\000\029\000\003\000\
    \028\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\017\000\009\000\016\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \032\000\026\000\042\000\043\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\035\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\008\000\
    \000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\012\000\000\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \009\000\025\000\039\000\042\000\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\035\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec analisador lexbuf =
   __ocaml_lex_analisador_rec lexbuf 0
and __ocaml_lex_analisador_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "lexer.mll"
                    ( singlecomment lexbuf)
# 186 "lexer.ml"

  | 1 ->
# 44 "lexer.mll"
                    ( multicomment lexbuf )
# 191 "lexer.ml"

  | 2 ->
# 45 "lexer.mll"
                    ( analisador lexbuf)
# 196 "lexer.ml"

  | 3 ->
# 46 "lexer.mll"
                    ( analisador lexbuf)
# 201 "lexer.ml"

  | 4 ->
# 47 "lexer.mll"
                    ( [ASSIGN] )
# 206 "lexer.ml"

  | 5 ->
# 48 "lexer.mll"
                    ( [LPR] )
# 211 "lexer.ml"

  | 6 ->
# 49 "lexer.mll"
                    ( [RPR] )
# 216 "lexer.ml"

  | 7 ->
# 50 "lexer.mll"
                    ( [LBK] )
# 221 "lexer.ml"

  | 8 ->
# 51 "lexer.mll"
                    ( [RBK] )
# 226 "lexer.ml"

  | 9 ->
# 52 "lexer.mll"
                    ( [LBC] )
# 231 "lexer.ml"

  | 10 ->
# 53 "lexer.mll"
                    ( [RBC] )
# 236 "lexer.ml"

  | 11 ->
# 54 "lexer.mll"
                    ( [PLUS] )
# 241 "lexer.ml"

  | 12 ->
# 55 "lexer.mll"
                    ( [MINUS] )
# 246 "lexer.ml"

  | 13 ->
# 56 "lexer.mll"
                    ( [TIMES] )
# 251 "lexer.ml"

  | 14 ->
# 57 "lexer.mll"
                    ( [DIV] )
# 256 "lexer.ml"

  | 15 ->
# 58 "lexer.mll"
                    ( [CMP Blt] )
# 261 "lexer.ml"

  | 16 ->
# 59 "lexer.mll"
                    ( [CMP Ble] )
# 266 "lexer.ml"

  | 17 ->
# 60 "lexer.mll"
                    ( [CMP Bgt] )
# 271 "lexer.ml"

  | 18 ->
# 61 "lexer.mll"
                    ( [CMP Bge] )
# 276 "lexer.ml"

  | 19 ->
# 62 "lexer.mll"
                    ( [CMP Beq] )
# 281 "lexer.ml"

  | 20 ->
# 63 "lexer.mll"
                    ( [CMP Bneq] )
# 286 "lexer.ml"

  | 21 ->
# 64 "lexer.mll"
                    ( [OR] )
# 291 "lexer.ml"

  | 22 ->
# 65 "lexer.mll"
                    ( [AND] )
# 296 "lexer.ml"

  | 23 ->
# 66 "lexer.mll"
                    ( [NOT] )
# 301 "lexer.ml"

  | 24 ->
# 67 "lexer.mll"
                    ( [COLON] )
# 306 "lexer.ml"

  | 25 ->
# 68 "lexer.mll"
                    ( [DELIMITER] )
# 311 "lexer.ml"

  | 26 ->
# 69 "lexer.mll"
                    ( [TO] )
# 316 "lexer.ml"

  | 27 ->
let
# 70 "lexer.mll"
               snum
# 322 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 71 "lexer.mll"
    ( 
      try
        [CST (int_of_string snum)]
      with _ -> raise (Lexing_error ("constante demasiado grande: " ^ snum)) )
# 329 "lexer.ml"

  | 28 ->
let
# 75 "lexer.mll"
          word
# 335 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 76 "lexer.mll"
  ( try
      let token = Hashtbl.find keyword_table word in  
      [token]
    with Not_found -> [IDENT word]
  )
# 343 "lexer.ml"

  | 29 ->
# 81 "lexer.mll"
              ( [EOF] )
# 348 "lexer.ml"

  | 30 ->
let
# 82 "lexer.mll"
         c
# 354 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 82 "lexer.mll"
              ( raise (Lexing_error (Char.escaped c)) )
# 358 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_analisador_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
   __ocaml_lex_singlecomment_rec lexbuf 35
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 85 "lexer.mll"
              ( newline lexbuf; analisador lexbuf)
# 370 "lexer.ml"

  | 1 ->
# 86 "lexer.mll"
              ( [EOF])
# 375 "lexer.ml"

  | 2 ->
# 87 "lexer.mll"
              ( singlecomment lexbuf)
# 380 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
   __ocaml_lex_multicomment_rec lexbuf 39
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "lexer.mll"
              ( analisador lexbuf)
# 392 "lexer.ml"

  | 1 ->
# 91 "lexer.mll"
              ( raise (Lexing_error "comentario nao fechado"))
# 397 "lexer.ml"

  | 2 ->
# 92 "lexer.mll"
              ( multicomment lexbuf)
# 402 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

;;

# 94 "lexer.mll"
 
  let next_token =
    let tokens = Queue.create () in
    fun lb ->
      if Queue.is_empty tokens then 
      begin
        let l = analisador lb in
        List.iter (fun t -> Queue.add t tokens) l
      end;
      Queue.pop tokens

# 421 "lexer.ml"
