# 1 "lexer.mll"
 
  open Lexing
  open Parser
  open Printf
  
  exception Lexing_error of string

  let create_hashtable size init =
    let tbl = Hashtbl.create size in
    List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
    tbl
  
  let keyword_table =
    create_hashtable 32
    [
      ("val", VAL);
      ("int", INT);
      ("if", IF);
      ("else", ELSE);
      ("print", PRINT);
      ("return", RETURN)
    ]

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

# 31 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\078\000\153\000\230\255\231\255\001\000\
    \012\000\002\000\003\000\031\000\242\255\243\255\244\255\245\255\
    \246\255\247\255\248\255\249\255\033\000\252\255\253\255\002\000\
    \049\000\255\255\254\255\236\255\239\255\237\255\235\255\234\255\
    \233\255\001\000\253\255\254\255\255\255\004\000\253\255\254\255\
    \096\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\027\000\026\000\255\255\255\255\029\000\
    \029\000\023\000\017\000\015\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\255\255\255\255\005\000\
    \014\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\000\000\000\000\000\000\038\000\000\000\000\000\
    \255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\036\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\009\000\000\000\000\000\000\000\000\000\007\000\032\000\
    \023\000\019\000\012\000\014\000\026\000\013\000\040\000\024\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\006\000\005\000\011\000\020\000\010\000\030\000\
    \029\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\018\000\028\000\017\000\027\000\003\000\
    \025\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\016\000\008\000\015\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \031\000\041\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\035\000\000\000\000\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\033\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\007\000\
    \000\000\000\000\000\000\000\000\023\000\000\000\037\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\011\000\000\000\020\000\000\000\
    \024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \008\000\040\000\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\033\000\255\255\255\255\037\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec analisador lexbuf =
   __ocaml_lex_analisador_rec lexbuf 0
and __ocaml_lex_analisador_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "lexer.mll"
                    ( singlecomment lexbuf)
# 181 "lexer.ml"

  | 1 ->
# 39 "lexer.mll"
                    ( multicomment lexbuf )
# 186 "lexer.ml"

  | 2 ->
# 40 "lexer.mll"
                    ( newline lexbuf; printf "\n"; analisador lexbuf)
# 191 "lexer.ml"

  | 3 ->
# 41 "lexer.mll"
                    ( printf " "; analisador lexbuf)
# 196 "lexer.ml"

  | 4 ->
# 42 "lexer.mll"
                    ( printf "="; ASSIGN)
# 201 "lexer.ml"

  | 5 ->
# 43 "lexer.mll"
                    ( printf "("; LPR )
# 206 "lexer.ml"

  | 6 ->
# 44 "lexer.mll"
                    ( printf ")"; RPR )
# 211 "lexer.ml"

  | 7 ->
# 45 "lexer.mll"
                    ( printf "["; LBK )
# 216 "lexer.ml"

  | 8 ->
# 46 "lexer.mll"
                    ( printf "]"; RBK )
# 221 "lexer.ml"

  | 9 ->
# 47 "lexer.mll"
                    ( printf "{"; LBC )
# 226 "lexer.ml"

  | 10 ->
# 48 "lexer.mll"
                    ( printf "}"; RBC )
# 231 "lexer.ml"

  | 11 ->
# 49 "lexer.mll"
                    ( printf "+"; PLUS )
# 236 "lexer.ml"

  | 12 ->
# 50 "lexer.mll"
                    ( printf "-"; MINUS )
# 241 "lexer.ml"

  | 13 ->
# 51 "lexer.mll"
                    ( printf "*"; TIMES )
# 246 "lexer.ml"

  | 14 ->
# 52 "lexer.mll"
                    ( printf "/"; DIV )
# 251 "lexer.ml"

  | 15 ->
# 53 "lexer.mll"
                    ( printf "<"; CMP Blt )
# 256 "lexer.ml"

  | 16 ->
# 54 "lexer.mll"
                    ( printf "<=";CMP Ble )
# 261 "lexer.ml"

  | 17 ->
# 55 "lexer.mll"
                    ( printf ">"; CMP Bgt )
# 266 "lexer.ml"

  | 18 ->
# 56 "lexer.mll"
                    ( printf ">=";CMP Bge )
# 271 "lexer.ml"

  | 19 ->
# 57 "lexer.mll"
                    ( printf "==";CMP Beq )
# 276 "lexer.ml"

  | 20 ->
# 58 "lexer.mll"
                    ( printf "!=";CMP Bneq )
# 281 "lexer.ml"

  | 21 ->
# 59 "lexer.mll"
                    ( printf "||"; OR)
# 286 "lexer.ml"

  | 22 ->
# 60 "lexer.mll"
                    ( printf "||"; AND)
# 291 "lexer.ml"

  | 23 ->
# 61 "lexer.mll"
                   ( printf "!"; NOT)
# 296 "lexer.ml"

  | 24 ->
# 63 "lexer.mll"
                    ( printf ":"; COLON)
# 301 "lexer.ml"

  | 25 ->
# 64 "lexer.mll"
                    ( printf ";"; DELIMITER)
# 306 "lexer.ml"

  | 26 ->
let
# 65 "lexer.mll"
               snum
# 312 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 66 "lexer.mll"
    ( 
      try
        printf "%s" snum; 
        CST (int_of_string snum)
      with _ -> raise (Lexing_error ("constante demasiado grande: " ^ snum)) )
# 320 "lexer.ml"

  | 27 ->
let
# 71 "lexer.mll"
          word
# 326 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 72 "lexer.mll"
  ( try
    let token = Hashtbl.find keyword_table word in
      printf "%s" word; 
      token
    with Not_found ->
      printf "%s" word; 
      IDENT word
    )
# 337 "lexer.ml"

  | 28 ->
# 80 "lexer.mll"
              ( raise End_of_file )
# 342 "lexer.ml"

  | 29 ->
let
# 81 "lexer.mll"
         c
# 348 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 81 "lexer.mll"
              ( raise (Lexing_error (Char.escaped c)) )
# 352 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_analisador_rec lexbuf __ocaml_lex_state

and singlecomment lexbuf =
   __ocaml_lex_singlecomment_rec lexbuf 33
and __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "lexer.mll"
              ( newline lexbuf; analisador lexbuf)
# 364 "lexer.ml"

  | 1 ->
# 85 "lexer.mll"
              ( raise (Lexing_error " "))
# 369 "lexer.ml"

  | 2 ->
# 86 "lexer.mll"
              ( singlecomment lexbuf)
# 374 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_singlecomment_rec lexbuf __ocaml_lex_state

and multicomment lexbuf =
   __ocaml_lex_multicomment_rec lexbuf 37
and __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 89 "lexer.mll"
              ( analisador lexbuf)
# 386 "lexer.ml"

  | 1 ->
# 90 "lexer.mll"
              ( raise (Lexing_error " "))
# 391 "lexer.ml"

  | 2 ->
# 91 "lexer.mll"
              ( multicomment lexbuf)
# 396 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_multicomment_rec lexbuf __ocaml_lex_state

;;

